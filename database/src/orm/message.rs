//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "message"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub author: i64,
    pub created_at: DateTime,
    pub edited_at: Option<DateTime>,
    pub channel: i64,
    pub pinned: bool,
    pub payload: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Author,
    CreatedAt,
    EditedAt,
    Channel,
    Pinned,
    Payload,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Attachment,
    Channel,
    Profile,
    UserPublicationReactionInteraction,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Author => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::EditedAt => ColumnType::DateTime.def().null(),
            Self::Channel => ColumnType::BigInteger.def(),
            Self::Pinned => ColumnType::Boolean.def(),
            Self::Payload => ColumnType::JsonBinary.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Attachment => Entity::has_many(super::attachment::Entity).into(),
            Self::Channel => Entity::belongs_to(super::channel::Entity)
                .from(Column::Channel)
                .to(super::channel::Column::Id)
                .into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::Author)
                .to(super::profile::Column::Id)
                .into(),
            Self::UserPublicationReactionInteraction => {
                Entity::has_many(super::user_publication_reaction_interaction::Entity).into()
            }
        }
    }
}

impl Related<super::attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attachment.def()
    }
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channel.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::user_publication_reaction_interaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPublicationReactionInteraction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

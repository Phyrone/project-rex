//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "profile"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub account: Option<i64>,
    pub name: String,
    pub discriminator: Option<i32>,
    pub node: Option<i64>,
    pub foreign_id: Option<i64>,
    pub nickname: Option<String>,
    pub bio: Option<Json>,
    pub picture: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Account,
    Name,
    Discriminator,
    Node,
    ForeignId,
    Nickname,
    Bio,
    Picture,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Account,
    Asset,
    ChannelMember,
    Comment,
    Guild,
    Message,
    Node,
    Post,
    UserPublicationReactionInteraction,
    UserPublicationsPreferenceInteraction,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Account => ColumnType::BigInteger.def().null(),
            Self::Name => ColumnType::String(None).def(),
            Self::Discriminator => ColumnType::Integer.def().null(),
            Self::Node => ColumnType::BigInteger.def().null(),
            Self::ForeignId => ColumnType::BigInteger.def().null(),
            Self::Nickname => ColumnType::String(None).def().null(),
            Self::Bio => ColumnType::JsonBinary.def().null(),
            Self::Picture => ColumnType::Binary(BlobSize::Blob(None)).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Account => Entity::belongs_to(super::account::Entity)
                .from(Column::Account)
                .to(super::account::Column::Id)
                .into(),
            Self::Asset => Entity::belongs_to(super::asset::Entity)
                .from(Column::Picture)
                .to(super::asset::Column::Checksum)
                .into(),
            Self::ChannelMember => Entity::has_many(super::channel_member::Entity).into(),
            Self::Comment => Entity::has_many(super::comment::Entity).into(),
            Self::Guild => Entity::has_many(super::guild::Entity).into(),
            Self::Message => Entity::has_many(super::message::Entity).into(),
            Self::Node => Entity::belongs_to(super::node::Entity)
                .from(Column::Node)
                .to(super::node::Column::Id)
                .into(),
            Self::Post => Entity::has_many(super::post::Entity).into(),
            Self::UserPublicationReactionInteraction => {
                Entity::has_many(super::user_publication_reaction_interaction::Entity).into()
            }
            Self::UserPublicationsPreferenceInteraction => {
                Entity::has_many(super::user_publications_preference_interaction::Entity).into()
            }
        }
    }
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Asset.def()
    }
}

impl Related<super::channel_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelMember.def()
    }
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Node.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::user_publication_reaction_interaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPublicationReactionInteraction.def()
    }
}

impl Related<super::user_publications_preference_interaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPublicationsPreferenceInteraction.def()
    }
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_member::Relation::Channel.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_member::Relation::Profile.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::ChannelType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "guilded_channel"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub channel: i64,
    pub guild: i64,
    pub parent: Option<i64>,
    pub position: i32,
    pub r#type: ChannelType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Channel,
    Guild,
    Parent,
    Position,
    Type,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Channel,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Channel2,
    Channel1,
    Guild,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Channel => ColumnType::BigInteger.def(),
            Self::Guild => ColumnType::BigInteger.def(),
            Self::Parent => ColumnType::BigInteger.def().null(),
            Self::Position => ColumnType::Integer.def(),
            Self::Type => ChannelType::db_type().def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Channel2 => Entity::belongs_to(super::channel::Entity)
                .from(Column::Channel)
                .to(super::channel::Column::Id)
                .into(),
            Self::Channel1 => Entity::belongs_to(super::channel::Entity)
                .from(Column::Parent)
                .to(super::channel::Column::Id)
                .into(),
            Self::Guild => Entity::belongs_to(super::guild::Entity)
                .from(Column::Guild)
                .to(super::guild::Column::Id)
                .into(),
        }
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

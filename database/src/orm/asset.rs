//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "asset"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub checksum: Vec<u8>,
    pub first_seen: DateTime,
    pub mime_type: Option<String>,
    pub parent: Option<Vec<u8>>,
    pub metadata: Json,
    pub first_by: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Checksum,
    FirstSeen,
    MimeType,
    Parent,
    Metadata,
    FirstBy,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Checksum,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Vec<u8>;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    SelfRef,
    Attachment,
    Profile,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Checksum => ColumnType::Binary(BlobSize::Blob(None)).def(),
            Self::FirstSeen => ColumnType::DateTime.def(),
            Self::MimeType => ColumnType::String(None).def().null(),
            Self::Parent => ColumnType::Binary(BlobSize::Blob(None)).def().null(),
            Self::Metadata => ColumnType::JsonBinary.def(),
            Self::FirstBy => ColumnType::BigInteger.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::SelfRef => Entity::belongs_to(Entity)
                .from(Column::Parent)
                .to(Column::Checksum)
                .into(),
            Self::Attachment => Entity::has_many(super::attachment::Entity).into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::FirstBy)
                .to(super::profile::Column::Id)
                .into(),
        }
    }
}

impl Related<super::attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attachment.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

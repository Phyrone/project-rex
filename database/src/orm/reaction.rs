//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "reaction"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub post: i64,
    pub message: i64,
    pub profile: i64,
    pub r#type: i64,
    pub placed_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Post,
    Message,
    Profile,
    Type,
    PlacedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Post,
    Message,
    Profile,
    Type,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (i64, i64, i64, i64);
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Message,
    Post,
    Profile,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Post => ColumnType::BigInteger.def(),
            Self::Message => ColumnType::BigInteger.def(),
            Self::Profile => ColumnType::BigInteger.def(),
            Self::Type => ColumnType::BigInteger.def(),
            Self::PlacedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Message => Entity::belongs_to(super::message::Entity)
                .from(Column::Message)
                .to(super::message::Column::Id)
                .into(),
            Self::Post => Entity::belongs_to(super::post::Entity)
                .from(Column::Post)
                .to(super::post::Column::Id)
                .into(),
            Self::Profile => Entity::belongs_to(super::profile::Entity)
                .from(Column::Profile)
                .to(super::profile::Column::Id)
                .into(),
        }
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
